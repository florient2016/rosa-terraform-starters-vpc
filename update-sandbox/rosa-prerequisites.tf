# rosa-prerequisites.tf - ROSA prerequisites avec prefix auto-g√©n√©r√© - SANS DUPLICATIONS

# G√©n√©rer un prefix unique automatiquement
resource "random_string" "prefix" {
  length  = 6
  lower   = true
  upper   = false
  numeric = true
  special = false
  
  keepers = {
    environment       = var.environment
    region           = var.aws_region
    deployment_mode  = var.single_az_deployment ? "saz" : "maz"
    availability_zone = var.single_az_deployment ? var.availability_zone : "multi"
  }
}

# Local pour le prefix avec indication Single AZ
locals {
  # Prefix avec indication du mode de d√©ploiement
  deployment_suffix = var.single_az_deployment ? "saz" : "maz"
  auto_generated_prefix = "rosa-${local.deployment_suffix}-${random_string.prefix.result}"
  
  # ARNs avec le prefix auto-g√©n√©r√©
  auto_installer_role_arn    = "arn:aws:iam::${local.account_id}:role/${local.auto_generated_prefix}-ManagedOpenShift-Installer-Role"
  auto_support_role_arn      = "arn:aws:iam::${local.account_id}:role/${local.auto_generated_prefix}-ManagedOpenShift-Support-Role"
  auto_controlplane_role_arn = "arn:aws:iam::${local.account_id}:role/${local.auto_generated_prefix}-ManagedOpenShift-ControlPlane-Role"
  auto_worker_role_arn       = "arn:aws:iam::${local.account_id}:role/${local.auto_generated_prefix}-ManagedOpenShift-Worker-Role"
  
  # Nom du cluster avec mode de d√©ploiement
  auto_cluster_name = "${local.auto_generated_prefix}-cluster"
  
  # Commande ROSA pour cr√©ation du cluster Single AZ
  rosa_cluster_create_command = var.single_az_deployment ? <<-EOT
#!/bin/bash
# Commande de cr√©ation du cluster ROSA - Single AZ
# G√©n√©r√©e automatiquement par Terraform

echo "üöÄ Cr√©ation du cluster ROSA Single AZ: ${local.auto_cluster_name}"
echo "üìç Zone de disponibilit√©: ${var.availability_zone}"
echo "üè∑Ô∏è  Prefix: ${local.auto_generated_prefix}"

rosa create cluster \
  --cluster-name "${local.auto_cluster_name}" \
  --region "${var.aws_region}" \
  --availability-zones "${var.availability_zone}" \
  --single-az \
  --compute-machine-type "${var.compute_machine_type}" \
  --compute-nodes ${var.compute_replicas} \
  --machine-cidr "${var.machine_cidr}" \
  --service-cidr "${var.service_cidr}" \
  --pod-cidr "${var.pod_cidr}" \
  --host-prefix ${var.host_prefix} \
  --sts \
  --role-arn "${local.auto_installer_role_arn}" \
  --support-role-arn "${local.auto_support_role_arn}" \
  --controlplane-iam-role "${local.auto_controlplane_role_arn}" \
  --worker-iam-role "${local.auto_worker_role_arn}" \
  --operator-roles-prefix "${local.auto_generated_prefix}" \
  --oidc-config-id "${rhcs_rosa_oidc_config.oidc_config.id}" \
  --version "${var.openshift_version}" \
  --yes \
  --watch
EOT
  : <<-EOT
#!/bin/bash
# Commande de cr√©ation du cluster ROSA - Multi AZ
# G√©n√©r√©e automatiquement par Terraform

echo "üöÄ Cr√©ation du cluster ROSA Multi-AZ: ${local.auto_cluster_name}"
echo "üåê R√©gion: ${var.aws_region} (Multi-AZ)"
echo "üè∑Ô∏è  Prefix: ${local.auto_generated_prefix}"

rosa create cluster \
  --cluster-name "${local.auto_cluster_name}" \
  --region "${var.aws_region}" \
  --multi-az \
  --compute-machine-type "${var.compute_machine_type}" \
  --compute-nodes ${var.compute_replicas} \
  --machine-cidr "${var.machine_cidr}" \
  --service-cidr "${var.service_cidr}" \
  --pod-cidr "${var.pod_cidr}" \
  --host-prefix ${var.host_prefix} \
  --sts \
  --role-arn "${local.auto_installer_role_arn}" \
  --support-role-arn "${local.auto_support_role_arn}" \
  --controlplane-iam-role "${local.auto_controlplane_role_arn}" \
  --worker-iam-role "${local.auto_worker_role_arn}" \
  --operator-roles-prefix "${local.auto_generated_prefix}" \
  --oidc-config-id "${rhcs_rosa_oidc_config.oidc_config.id}" \
  --version "${var.openshift_version}" \
  --yes \
  --watch
EOT
}

# Sauvegarder le prefix g√©n√©r√© dans un fichier local
resource "local_file" "generated_prefix" {
  filename = "${path.module}/generated_prefix.txt"
  content  = <<-EOT
# Prefix g√©n√©r√© automatiquement par Terraform
# G√©n√©r√© le: ${timestamp()}
# Mode: ${var.single_az_deployment ? "Single AZ" : "Multi-AZ"}
${var.single_az_deployment ? "# Zone: ${var.availability_zone}" : "# Zones: Multi-AZ"}

PREFIX=${local.auto_generated_prefix}
CLUSTER_NAME=${local.auto_cluster_name}
DEPLOYMENT_MODE=${local.deployment_suffix}
REGION=${var.aws_region}
${var.single_az_deployment ? "AVAILABILITY_ZONE=${var.availability_zone}" : "MULTI_AZ=true"}

# Utilisation:
# export PREFIX=$(grep "^PREFIX=" generated_prefix.txt | cut -d'=' -f2)
# export CLUSTER_NAME=$(grep "^CLUSTER_NAME=" generated_prefix.txt | cut -d'=' -f2)
EOT
  
  depends_on = [random_string.prefix]
}

# V√©rifier les r√¥les compte existants
resource "null_resource" "verify_account_roles" {
  depends_on = [random_string.prefix, local_file.generated_prefix]
  
  provisioner "local-exec" {
    command = <<-EOT
      echo "üîç Mode de d√©ploiement: ${var.single_az_deployment ? "Single AZ (" + var.availability_zone + ")" : "Multi-AZ"}"
      echo "üîç V√©rification de la connexion ROSA..."
      
      # V√©rifier la connexion ROSA
      if ! rosa whoami > /dev/null 2>&1; then
        echo "‚ùå Erreur: Non connect√© √† ROSA. V√©rifiez votre ROSA_TOKEN"
        echo "üí° D√©finissez: export ROSA_TOKEN=\"your-token\""
        exit 1
      fi
      
      echo "‚úÖ Connexion ROSA OK"
      rosa whoami
      
      # V√©rifier les quotas
      echo "üîç V√©rification des quotas AWS..."
      rosa verify quota --region ${var.aws_region} || echo "‚ö†Ô∏è Avertissement: Probl√®me de quota d√©tect√©"
      
      echo "‚úÖ V√©rifications pr√©liminaires termin√©es"
    EOT
  }
  
  triggers = {
    rosa_token_change = timestamp()
    region           = var.aws_region
    deployment_mode  = var.single_az_deployment ? "saz" : "maz"
  }
}

# Cr√©er les r√¥les compte avec le prefix auto-g√©n√©r√©
resource "null_resource" "create_account_roles" {
  depends_on = [null_resource.verify_account_roles]
  
  provisioner "local-exec" {
    command = <<-EOT
      echo "üîç Prefix g√©n√©r√© automatiquement: ${local.auto_generated_prefix}"
      echo "üìù Prefix sauvegard√© dans: generated_prefix.txt"
      
      echo "üîç V√©rification des r√¥les compte existants avec prefix ${local.auto_generated_prefix}..."
      
      # V√©rifier si les r√¥les existent d√©j√† avec ce prefix
      if rosa list account-roles --prefix ${local.auto_generated_prefix} 2>/dev/null | grep -q "${local.auto_generated_prefix}-ManagedOpenShift"; then
        echo "‚úÖ Les r√¥les compte avec le prefix '${local.auto_generated_prefix}' existent d√©j√†"
        echo "üìã R√¥les existants:"
        rosa list account-roles --prefix ${local.auto_generated_prefix}
      else
        echo "üîÑ Cr√©ation des r√¥les compte pour ${var.single_az_deployment ? "Single AZ deployment" : "Multi-AZ deployment"}..."
        
        # Cr√©er les r√¥les compte
        rosa create account-roles \
          --mode auto \
          --yes \
          --prefix "${local.auto_generated_prefix}" \
          --version "${var.openshift_version}" \
          --force-policy-creation
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ R√¥les compte cr√©√©s avec succ√®s!"
          echo "üìã R√¥les cr√©√©s:"
          rosa list account-roles --prefix ${local.auto_generated_prefix}
        else
          echo "‚ùå Erreur lors de la cr√©ation des r√¥les compte"
          exit 1
        fi
      fi
      
      echo ""
      echo "üìä R√âSUM√â DE LA CONFIGURATION:"
      echo "üè∑Ô∏è  PREFIX: ${local.auto_generated_prefix}"
      echo "üèóÔ∏è  MODE: ${var.single_az_deployment ? "Single AZ (" + var.availability_zone + ")" : "Multi-AZ"}"
      echo "üåç R√âGION: ${var.aws_region}"
      echo "üì¶ VERSION: ${var.openshift_version}"
      echo "üíæ FICHIER: generated_prefix.txt"
      echo ""
    EOT
  }
  
  triggers = {
    prefix               = local.auto_generated_prefix
    openshift_version    = var.openshift_version
    account_id          = local.account_id
    single_az_deployment = var.single_az_deployment
    availability_zone    = var.single_az_deployment ? var.availability_zone : "multi-az"
  }
}

# Output pour information
output "generated_prefix_info" {
  description = "Informations sur le prefix g√©n√©r√© automatiquement"
  value = {
    prefix              = local.auto_generated_prefix
    cluster_name        = local.auto_cluster_name
    deployment_mode     = var.single_az_deployment ? "Single AZ" : "Multi-AZ"
    availability_zone   = var.single_az_deployment ? var.availability_zone : "Multi-AZ"
    generated_at        = timestamp()
    saved_to_file       = "generated_prefix.txt"
    installer_role_arn  = local.auto_installer_role_arn
    support_role_arn    = local.auto_support_role_arn
  }
}

# Output pour la commande ROSA
output "rosa_cluster_create_command" {
  description = "Commande compl√®te de cr√©ation du cluster ROSA avec prefix auto-g√©n√©r√©"
  value       = local.rosa_cluster_create_command
}

# Output de configuration de d√©ploiement  
output "deployment_configuration" {
  description = "Configuration du d√©ploiement"
  value = {
    mode              = var.single_az_deployment ? "Single AZ" : "Multi-AZ"
    availability_zone = var.single_az_deployment ? var.availability_zone : "Multi-AZ"
    region           = var.aws_region
    prefix           = local.auto_generated_prefix
    cluster_name     = local.auto_cluster_name
    machine_type     = var.compute_machine_type
    compute_nodes    = var.compute_replicas
  }
}
