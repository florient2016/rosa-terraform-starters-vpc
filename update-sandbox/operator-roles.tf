# operator-roles.tf - R√¥les op√©rateur ROSA - SANS DUPLICATION avec rosa-prerequisites.tf

# Cr√©er les r√¥les op√©rateur apr√®s OIDC config (nom unique)
resource "null_resource" "setup_operator_roles" {
  depends_on = [null_resource.create_account_roles, rhcs_rosa_oidc_config.oidc_config]
  
  provisioner "local-exec" {
    command = <<-EOT
      echo "üîç Configuration des r√¥les op√©rateur avec prefix ${local.auto_generated_prefix}..."
      
      # V√©rifier si les r√¥les op√©rateur existent
      if rosa list operator-roles --prefix ${local.auto_generated_prefix} 2>/dev/null | grep -q "${local.auto_generated_prefix}"; then
        echo "‚úÖ Les r√¥les op√©rateur existent d√©j√†"
        rosa list operator-roles --prefix ${local.auto_generated_prefix}
      else
        echo "üîÑ Cr√©ation des r√¥les op√©rateur..."
        
        # Cr√©er les r√¥les op√©rateur
        rosa create operator-roles \
          --mode auto \
          --yes \
          --prefix "${local.auto_generated_prefix}" \
          --oidc-config-id "${rhcs_rosa_oidc_config.oidc_config.id}" \
          --installer-role-arn "${local.auto_installer_role_arn}"
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ R√¥les op√©rateur cr√©√©s avec succ√®s!"
          rosa list operator-roles --prefix ${local.auto_generated_prefix}
        else
          echo "‚ùå Erreur lors de la cr√©ation des r√¥les op√©rateur"
          exit 1
        fi
      fi
    EOT
  }
  
  triggers = {
    prefix           = local.auto_generated_prefix
    oidc_config_id   = rhcs_rosa_oidc_config.oidc_config.id
    installer_role   = local.auto_installer_role_arn
  }
}

# Output pour les r√¥les op√©rateur
output "operator_roles_info" {
  description = "Informations sur les r√¥les op√©rateur"
  value = {
    prefix         = local.auto_generated_prefix
    oidc_config_id = rhcs_rosa_oidc_config.oidc_config.id
    created        = true
  }
  depends_on = [null_resource.setup_operator_roles]
}
